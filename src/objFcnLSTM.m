function [objFcn] = objFcnLSTM(p, t, pv, tv, inputName)
    objFcn = @valErrorFcn;
    function [valError, cons, fileName] = valErrorFcn(optVars)
        layers = [
               sequenceInputLayer(ESPConst.N_INPUT_FEATURES)
               lstmLayer(optVars.NumHiddenUnits, OutputMode="last")
               fullyConnectedLayer(ESPConst.N_OUTPUT_CLASSES_ALL)
               softmaxLayer
               classificationLayer
                 ];
        miniBatchSize = 512;
        validationFrequency = floor(numel(t) / miniBatchSize);

        options = trainingOptions('sgdm', ...
            'InitialLearnRate', optVars.InitialLearnRate, ...
            'Momentum',optVars.Momentum, ...
            'MaxEpochs', optVars.MaxEpochs, ... 
            'LearnRateSchedule', 'piecewise', ...
            'LearnRateDropPeriod', 40, ...
            'LearnRateDropFactor', optVars.LearnRateDropFactor, ...
            'MiniBatchSize', miniBatchSize, ...
            'L2Regularization', optVars.L2Regularization, ...
            'ExecutionEnvironment', "gpu", ...
            'Verbose', true, ...
            'Plots', 'training-progress', ...
            'ValidationFrequency', validationFrequency);

        tNN = trainNetwork(p, t, layers, options);
        predicted = classify(tNN, pv);
        valError =  1 - mean(predicted == transpose(tv));
        fileName = num2str(valError) + "_LSTM_" + inputName;
        save(ESPConst.PATH_TRAINED_NNS + fileName, 'tNN','valError','options');
        cons = [];
    end
end